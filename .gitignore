#忽略文件

#一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。 来看一个实际的 .gitignore 例子：

#    $ cat .gitignore
#    *.[oa]
#    *~

#第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有名字以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就为你的新仓库设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。

#文件 .gitignore 的格式规范如下：

#    所有空行或者以 # 开头的行都会被 Git 忽略。
#    可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。
#    匹配模式可以以（/）开头防止递归。
#    匹配模式可以以（/）结尾指定目录。
#    要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。

#所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）； 问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。

#我们再看一个 .gitignore 文件的例子：

## 忽略所有的 .a 文件
#*.a

## 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件
#!lib.a

## 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
#/TODO

## 忽略任何目录下名为 build 的文件夹
#build/

## 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt
#doc/*.txt

## 忽略 doc/ 目录及其所有子目录下的 .pdf 文件
#doc/**/*.pdf

#Tip

#GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。

#Note
#在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。 然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。 （Linux 内核的源码库拥有 206 个 .gitignore 文件。）
#多个 .gitignore 文件的具体细节超出了本书的范围，更多详情见 man gitignore 。


#vscode配置文件
/.vscode
#二进制文件
*.out
#LaTex输出文件
#/LaTex/**/*.pdf
/LaTex

#其他存储库
/repo
